=== Protokoli

Git može da koristi četiri glavna protokola za transfer podataka: _Local_, _HTTP_, _Secure Shell_ (SHH) i _Git_.
Ovde ćemo prodiskutovati šta su oni i u kakvim biste okolnostima želeli (ili ne biste želeli) da ih korstite.

==== Lokalni protokol

(((protocols, local)))
Najosnovniji je _Lokalni protokol_, kod koga se udaljeni repozitorijum nalazi na drugom direktorijumu na disku.
Ovo se često koristi ako svi u timu imaju pristup deljenom fajl sistemu kao što je NFS, ili u manje verovatnom slučaju ako se svi loguju na isti računar.
Drugi slučaj ne bi bio idealan, jer bi se sve instance koda iz repozitorijuma nalazile na istom računaru, što bi učinilo katastrofalni gubitak verovatnijim.

Ako imate deljen mauntovan fajl sistem (_shared mounted filesystem_), onda možete da klonirate lokalni repozitorijum, da gurate na njega i da povlačite sa njega.
Da klonirate ovakav repozitorijum ili da dodate jedan kao rimout postojećem objektu, koristite putanju do repozitorijuma kao URL.
Na primer, da biste klonirali lokalni repozitorijum, pokrenite nešto ovako:

[source,console]
----
$ git clone /opt/git/project.git
----

Možete da uradite i ovo:

[source,console]
----
$ git clone file:///opt/git/project.git
----

Git radi malo drugačije ako eksplicitno navedete `file://` na početku URL-a.
Ako specificirate samo putanju, Git pokušava da koristi hardlinkove ili da dirketno kopira fajlove koji su mu potrebni.
Ako specificirate `file://`, Git pokreće proces koji obično koristi za transfer podataka preko mreže koji je generalno mnogo manje efikasna metoda za prenos podataka.
Glavni razlog zbog koga biste možda želeli da specificirate prefiks `file://` je ukoliko želite čistu kopiju repozitorijuma sa izbačenim stranim referencama i objektima -- recimo posle importa sa drugog sistema za kontrolu verzije ili nešto slično (pogledajte <<_git_internals>> za zadatake oko održavanja.)
Ovde ćemo koristiti normalnu putanju jer je tako skoro uvek brže.

Da biste dodali lokalni repozitorijum u postojeći Git projekat, možete da pokrenete nešto ovako:

[source,console]
----
$ git remote add local_proj /opt/git/project.git
----

Onda možete da gurate na taj rimout i da povlačite sa njega kao što ste radili i preko mreže.

===== Prednosti

Prednosti repozitorujuma baziranih na fajlovima su to što su jednostavni i koriste postojeće dozvole nad fajlovima i pristup mreži.
Ako već imate deljivi fajl sistem kome želite da ceo tim pristupa, podešavanje ovakvog repozitorijuma je veoma lako.
Smestite golu kopiju repozitorijuma negde gde svi imaju deljivi pristup i podesite dozvole za čitanje i upis kao što biste kod bilo kod drugog deljivog direktorijuma.
U <<_git_on_the_server>> ćemo diskutovati o tome kako da eksportujete gole kopije repozitorijuma za ovu namenu.

Ovo je takođe dobra opcija da brzo zgrabite rad sa nečijeg drugog radnog repozitorijuma.
Ako vi i saradnik radite na istom projektu, i on ili ona želi da vam čekautuje nešto, pokretanje komande kao što je `git pull /home/john/project` je obično lakše nego da guraju podatke na udaljeni server a da ih vi povučete.

===== Mane

Mane ove metode su to što je kod deljivog pristupa generalno teže podesiti i pristupiti serveru sa razlilčitih lokacija nego kod osnovnog pristupa mreži.
Ako želite da gurnete sa laptopa kada ste kući, morate da mauntujete udaljeni disk, što može da bude teško i sporo u poređenju sa pristupom preko mreže.

Važno je pomenuti da ovo nije uvek najbrža opcija ako koristite neki udeljeni maunt.
Lokalni repozitorijum je brz samo ako imate brz pristup podacima.
Repozitorijum na NFS-u je često sporiji nego repozitorijum preko SSH-a na istom serveru, što dopušta Gitu da umnoži lokalne diskove na svakom sistemu.

Konačno, ovaj protok ne štiti repozitorujum od slučajne štete.
Svaki korisnik ima potpuni pristup preko šela "udaljenom" direktorijumu, i nema ništa što ga sprečava da promeni ili ukloni interne Git fajlove i time pokvari repozitorijum.

==== The HTTP Protocols

Git can communicate over HTTP in two different modes.
Prior to Git 1.6.6 there was only one way it could do this which was very simple and generally read-only.
In version 1.6.6 a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
In the last few years, this new HTTP protocol has become very popular since it's simpler for the user and smarter about how it communicates.
The newer version is often referred to as the ``Smart'' HTTP protocol and the older way as ``Dumb'' HTTP.
We'll cover the newer ``smart'' HTTP protocol first.

===== Smart HTTP

(((protocols, smart HTTP)))
The ``smart'' HTTP protocol operates very similarly to the SSH or Git protocols but runs over standard HTTP/S ports and can use various HTTP authentication mechanisms, meaning it's often easier on the user than something like SSH, since you can use things like username/password basic authentication rather than having to set up SSH keys.

It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the `git://` protocol, and can also be pushed over with authentication and encryption like the SSH protocol.
Instead of having to set up different URLs for these things, you can now use a single URL for both.
If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password.
The same goes for read access.

In fact, for services like GitHub, the URL you use to view the repository online (for example, ``https://github.com/schacon/simplegit[]'') is the same URL you can use to clone and, if you have access, push over.

===== Dumb HTTP

(((protocols, dumb HTTP)))
If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler ``dumb'' HTTP protocol.
The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
The beauty of the Dumb HTTP protocol is the simplicity of setting it up.
Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you're done (See <<_git_hooks>>).
At that point, anyone who can access the web server under which you put the repository can also clone your repository.
To allow read access to your repository over HTTP, do something like this:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

That's all.(((hooks, post-update)))
The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.
This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like

[source,console]
----
$ git clone https://example.com/gitproject.git
----

In this particular case, we're using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server – just put the bare repository in its path.
The Git data is served as basic static files (see <<_git_internals>> for details about exactly how it's served).

Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner.
It's rare to run a mix of the two services.

===== The Pros

We'll concentrate on the pros of the Smart version of the HTTP protocol.

The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one.

You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.

Another nice thing is that HTTP/S are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.

===== The Cons

Git over HTTP/S can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over the ``Smart'' HTTP protocol for serving Git.

If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
There are however several credential caching tools you can use, including Keychain access on OSX and Credential Manager on Windows, to make this pretty painless.
Read <<_credential_caching>> to see how to set up secure HTTP password caching on your system.

==== The SSH Protocol

(((protocols, SSH)))
A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places – and if it isn't, it's easy to do.
SSH is also an authenticated network protocol; and because it's ubiquitous, it's generally easy to set up and use.

To clone a Git repository over SSH, you can specify ssh:// URL like this:

[source,console]
----
$ git clone ssh://user@server/project.git
----

Or you can use the shorter scp-like syntax for the SSH protocol:

[source,console]
----
$ git clone user@server:project.git
----

You can also not specify a user, and Git assumes the user you're currently logged in as.

===== The Pros

The pros of using SSH are many.
First, SSH is relatively easy to set up – SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure – all data transfer is encrypted and authenticated.
Last, like the HTTP/S, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.

===== The Cons

The negative aspect of SSH is that you can't serve anonymous access of your repository over it.
People must have access to your machine over SSH to access it, even in a read-only capacity, which doesn't make SSH access conducive to open source projects.
If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch over.

==== The Git Protocol

(((protocols, git)))
Next is the Git protocol.
This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
In order for a repository to be served over the Git protocol, you must create the `git-daemon-export-ok` file – the daemon won't serve a repository without that file in it – but other than that there is no security.
Either the Git repository is available for everyone to clone or it isn't.
This means that there is generally no pushing over this protocol.
You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project's URL could push to your project.
Suffice it to say that this is rare.

===== The Pros

The Git protocol is often the fastest network transfer protocol available.
If you’re serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it’s likely that you'll want to set up a Git daemon to serve your project.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.

===== The Cons

The downside of the Git protocol is the lack of authentication.
It's generally undesirable for the Git protocol to be the only access to your project.
Generally, you'll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
It's also probably the most difficult protocol to set up.
It must run its own daemon, which requires `xinetd` configuration or the like, which isn't always a walk in the park.
It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
Behind big corporate firewalls, this obscure port is commonly blocked.
