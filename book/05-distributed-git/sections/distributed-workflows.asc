=== Distribuirani tokovi rada

(((workflows)))
Za razliku od centralizovanih sistema za kontrolu verzije (CVCS), distributivna priroda Gita vam omogućava da budete mnogo fleksibilniji po pitanju načina na koji programeri kolaboriraju u projektima.
Kod centralizovanih sistema, svi programeri su čvorovi koji manje-više jednako rade na centralnom habu.
Kod Gita, međutim, svaki programer je potencijalno i čvor i hab -- odnosno, svaki programer može i da doprinese kodu drugim repozitorijumima i da održava javni repozitorijum po kome drugi mogu da baziraju svoj rad i kome mogu da doprinesu.
Ovo otvara ogroman spektar mogućnosti za tok rada za vaše projekte i/ili za vaš tim, zato ćemo preći nekoliko čestih paradigmi koje koriste ovu fleksibilnost.
Pogledaćemo prednosti i moguće mane svakog dizajna; možete da izaberete samo jedan od njih koji ćete korstiti, ili možete da pomešate osobine iz svakog od njih.

==== Centralizovan tok rada

(((workflows, centralized)))
U centralizovanim sistemima, generalno postoji jedinstven kolaboracioni model -- centralizovani tok rada.
Jedan centralni hab, ili repozitorijum, može da prihvati kod, a svi drugi sinhronišu svoj rad prema njemu.
Programeri su čvorovi -- potrošači tog haba -- i sinhronišu se prema tom jednom mestu.

.Centralizovani tok rada.
image::images/centralized_workflow.png[Centralizovani tok rada.]

Ovo znači da ako dva developera kloniraju sa haba i obojica naprave promene, prvi developer koji gurne svoje promene nazad na hab može to da uradi bez problema.
Drugi developer mora da se spoji u rad prvog pre nego što gurne svoje promene, kako ne bi pisao preko promena koje je napravio prvi.
Ovaj koncept je na Gitu isti kao i na _Subversion_-u(((Subversion))) (ili bilo kom drugom CVCS-u), i ovaj model radi odlično u Gitu.

Ako ste se već navikli na centralizovani tok rada u svojoj kompaniji ili timu, možete lako da nastavite da koristite taj tok rada sa Gitom.
Jednostavno podesite jedan repozitorijum, i dajte svim članovima tima dozvolu za guranje na njega; Git neće dozvoliti korisnicima da pišu preko tuđih promena.
Recimo da Marko i Milica počinju da rade istovremeno.
Marko završava svoje promene i gura ih na server.
Onda Milica pokušava da gurne svoje promene, ali server ih odbija.
Server joj kaže da pokušava da gurne promene koje se ne uklapaju u metodu motanja unapred i da neće moći da uradi to dok ne pribavi podatke i ne uradi spoj.
Ovaj tok rada odgovara mnogim ljudima jer je to paradigma na koju su navikli.

Ovo nije ograničeno samo na male timove.
Sa Gitovim modelom za grananje, moguće je da na stotine developera uspešno radi na jednom projektu koristeći istovremeno na desetine grana.

[[_integration_manager]]
==== Tok rada sa rukovodiocem integracija

(((workflows, integration manager)))
Pošto Git dopušta da imate više udaljenih repozitorijuma, moguće je dizajnirati tok rada u kome svaki developer ima pristup čitanja sopstvenom javnom repozitorijumu i čitanja tuđih.
Ovakav scenario često uključuje i kanonički repozitorijum koji predstavlja "zvaničan" projekat.
Kako biste doprineli takvom projektu, treba da napravite sopstveni javni klon projekta i na njega gurate izmene.
Onda treba da pošaljete zahtev održavaocu glavnog projekta da povuče vaše izmene.
Održavalac onda može da doda vaš repozitorijum kao rimout, da testira promene lokalno, spoji ih u sopstvenu granu, i onda gurne nazad na repozitorijum.
Ovaj proces radi na sledeći način:

1. Održavalac projekta gurne promene na svoj javni repozitorijum.
2. Kontributor klonira taj repozitorijum i pravi promene.
3. Kontributor gura promene na ličnoj javnoj kopiji.
4. Kontributor šalje održavaocu mejl sa molbom da povuče promene.
5. Održavalac dodaje kontributorov repozitorijum kao rimout i spaja lokalno.
6. Održavalac gura spojene promene na glavni repozitorijum.

[[wfdiag_b]]
.Tok rada sa rukovodiocem integracija.
image::images/integration-manager.png[Tok rada sa rukovodiocem integracija.]

(((forking)))
Ovo je veoma čest tok rada sa alatima koji su bazirani na habovima kao što je GitHub ili GitLab, gde je lako forkovati projekat i gurnuti promene u svoj fork koje će svi videti.
Jedna od glavnih prednosti ovog pristupa je to što možete da nastavite sa svojim radom, a održavalac glavnog repozitorijuma može da povuče vaše promene u bilo kom trenutku.
Kontributirori ne moraju da čekaju da projekat pripoji njihove promene -- svako radi svojim tempom.

==== Tok rada sa diktatorima i poručnicima

(((workflows, dictator and lieutenants)))
Ovo je varijanta toka rada sa više repozitorijuma.
Generalno ga koriste ogromni projekti sa stotinama kolaboratora; jedan poznat primer je Linuks kernel.
Razni rukovodioci integracijama su zaduženi za određene delove repozitorijuma; oni su poručnici.
Svi poručnici imaju jednog rukovodioca integracijama poznat kao blagonakloni diktator.
Repozitorijum blagonaklonog diktatora služi kao referentni repozitorijum sa kog svi kolaboratori treba da povuku.
Ovaj proces radi na sledeći način (pogledajte <<wfdiag_c>>):

1. Obični developeri rade na svojim tematskih granama i rebaziraju svoj rad na vrh `master`-a.
Master grana je diktatorova.
2. Poručnici spajaju tematske grane developerâ u svoju `master` granu.
3. Diktator spaja `master` grane poručnika u diktatorovu `master` granu.
4. Diktator gura svoj `master` na referentni repozitorijum kako bi drugi developeri mogli da ga rebaziraju.

[[wfdiag_c]]
.Tok rada sa blagonaklonim diktatorom.
image::images/benevolent-dictator.png[Tok rada sa blagonaklonim diktatorom.]

Ovakav tok rada nije čest, ali može da bude koristan kod velikih projekata, ili u okruženjima u kojima je hijerarhija jako izražena.
Dozvoljava da vođa projekta (diktator) delegira veliki deo posla i sakuplja velike podskupove koda sa više mesta pre nego što ih integriše.

==== Rezime tokova rada

To su bili neki često korišćeni tokovi rada koje je moguće sprovesti u delo koristeći distibuirane sisteme kao što je Git, ali jasno je da su moguće mnoge varijacije koje treba prilagoditi određenom toku rada u praksi.
Sada kada (bi trebalo da) možete da odlučite koja kombinacija tokova rada će vam odgovarati, pokrićemo neke specifičnije primene oko toga kako da obavite neke glavne zadatke ovih tokova rada.
U sledećem odeljku, naučićete nešto o nekoliko čestih obrazaca po kojima se doprinosi projektu.
