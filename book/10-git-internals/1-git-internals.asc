[[_git_internals]]
== Git iznutra

Možda se skočili direktno na ovo poglavlje od prethodnog, ili ste možda stigli ovde nakon što ste pročitali celu knjigu -- u svakom slučaju, ovde ćemo da pogledamo kako Git radi iznutra i kako je implementiran.
Mislimo da je učenje ovih aspekata Gita fundamentalno za razumevanje koliko je Git koristan i možan alat, ali su neki zauzeli drugačiji stav, vodeći se time da to može dovesti početnike do zabune, i da je preterano složena materija za njih.
Zato smo našli kompromis i odlučili da ovo bude poslendnje poglavlje u knjizi kako biset mogli da ga pročitate pre ili kasnije tokom učenja.
Na vama je da odlučite.

Sada kada ste ovde, vreme je da krenemo.
Prvo, ako ovo još uvek nije jasno, Git je u osnovi datotečni sistem, adresabilan po sadržaju sa VCS korisničkim interfejsom napisanim povrh svega.
Uskoro ćete naučiti detaljnije na šta se misli pod ovime.

U ranim danima Gita (uglavnom pre verzije 1.5), korisnički interfejs je bio mnogo složeniji jer je naglašavao da je ovo datotečni sistem a ne doteran VCS.
U poslednjih nekoliko godina, UI je toliko unapređen da je njegovo korišćenje psotalo dosta jednostavno; mada često i dalje kruže stereotipi o tome kako je Git previše kompleksan i težak za učenje.

Sloj datotečnog sistema adresibilnog po sadržaju je neverovatno kul stvar, pa ćemo prvo obraditi njega u ovom polgavlju; posle toga ćete naučiti nešto o prenosnim mehanizmima i zadacima vezanim za održavanje repozitorijuma u koje ćete kad-tad možda morati da se upustite.

include::sections/plumbing-porcelain.asc[]

include::sections/objects.asc[]

include::sections/refs.asc[]

include::sections/packfiles.asc[]

include::sections/refspec.asc[]

include::sections/transfer-protocols.asc[]

include::sections/maintenance.asc[]

include::sections/environment.asc[]

=== Summary

You should have a pretty good understanding of what Git does in the background and, to some degree, how it's implemented.
This chapter has covered a number of plumbing commands – commands that are lower level and simpler than the porcelain commands you've learned about in the rest of the book.
Understanding how Git works at a lower level should make it easier to understand why it's doing what it's doing and also to write your own tools and helping scripts to make your specific workflow work for you.

Git as a content-addressable filesystem is a very powerful tool that you can easily use as more than just a VCS.
We hope you can use your newfound knowledge of Git internals to implement your own cool application of this technology and feel more comfortable using Git in more advanced ways.
